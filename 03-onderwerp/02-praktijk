############
# praktijk #
############

In dit hoodstuk zullen we bekijken hoe je een puppet server en client opzet, waarna we aan de hand van enkele simpele voorbeelden een manifest zullen samenstellen om de client en zelfs de server zelf te beheren.

Allereerst enkele concessies: Deze tutorial is in principe enkel gegarandeerd te werken op Fedora 14, de linux-distributie die ik zelf gebruik. Het meeste ervan zal echter wel overdraagbaar zijn naar toekomstige versies en/of andere distributies. Als je niet weet wat een linux-distributie is raad ik je aan om het even op te zoeken op het internet, er is genoeg informatie voorhanden en het is niet het doel van dit eindwerk om je dat allemaal uit te leggen dus doe ik dat ook niet.

Ik ga er vanuit dat je voor je hieraan begint een werkend Fedora 14 (of vergelijkbare) distributie al geinstalleerd hebt. Moest dit niet het geval zijn kan je altijd even kijken op de website www.howtoforge.com . Die website is een rijke bron van informatie in verband met installatie van een veelvoud aan paketten op linux en heeft dan ook al een grote hoeveelheid bijgedragen aan mijn kennis.


Installatie
###########
De eerste stap die we zetten is het installeren van de puppet client en de puppet server, deze noemen in de package manager van Fedora respectievelijk puppet en puppet-server. In het algemeen word echter voor de puppet server de term puppetmaster gebruikt. Het installeren gebeurt door middel van het commando: "sudo yum -y install puppet puppet-server". Als we even de tijd nemen om dit commando te ontleden zien we dat het bestaat uit meerdere onderdelen, namelijk: sudo => sudo is de afkorting van "switch user do", en doet zoveel als van gebruiker veranderen om dan een bepaald commando uit te voeren. We gebruiken dit omdat je als gewone gebruiker normaal gezien niet zomaar paketten mag installeren, dit is voorbehouden voor de root-gebruiker. de root-gebruiker is de unix-variant van de administrator account onder windows, maar dan echt almachtig. zijn wil is wet en daar is geen weg rond, dus ook niet als je per ongeluk als root de helft van je data weg vaagt, pas dus op wanneer en vooral hoe je de root-account gebruikt. De reactie van dit commando hangt echter ook af van de configuratie ervan, standaard zal deze bij gebruik een paswoord vragen, het paswoord van de root-account. Er is echter ook de mogelijk dat je volledige rechten hebt gekregen op dit programma en dat je zelfs zonder paswoord de kracht van de root-account kan gebruiken. Dit is enorm gevaarlijk en dan ook enkel aan te raden wanneer je weet met wat je bezig bent.

het tweede deel is "yum": yum is de standaard package manager van Fedora 14 en is de afkorting van "yellowdog updater, modified". De naam is afkomstig van de linux-distributie die deze front-end ontwikkeld heeft, namelijk "yellowdog linux" oftewel "ydl". Deze word gebruikt om paketten te installeren en deinstalleren, en uiteraard om bij te houden welke paketten al geinstalleerd zijn en welke beschikbaar zijn voor jouw systeem. In weze is yum slechts een front-end voor rpm, de "redhat package manager". Het grootste probleem met rpm was dat er geen dependency resolving plaatsvond en dat zorgt er dus voor dat als het paketje dat jij wilt installeren afhankelijk is van een of meerdere andere paketten, je eerst manueel deze andere paketten moest gaan installeren. Niet  echt een leuk karweitje als je er even over nadenkt. yum zorgt ervoor dat dit dus wel automatisch gedaan word en voegt daarnaast nog enkele handige mogelijkheden toe zoals plugins. door middel van deze plugins kan je extra functionaliteit toevoegen aan yum, denk bijvoorbeeld aan de plugin fastestmirror. Deze plugin zorgt ervoor dat eerst word vastgesteld welke mirror op dit moment het snelst aan jouw behoeften kan voorzien en zorgt ervoor dat jij van deze mirror gebruik maakt, zonder dat je daarvoor iets hoeft te doen. Bij fedora 14 is deze plugin trouwens standaard al aanwezig.

Daarna komt de schakeloptie "-y": deze specifieert dat yum op alle vragen die hij normaal gezien zou stellen, simpelweg "ja" antwoord. Dit is uiteraard handig, maar pas er wel een beetje mee op, zeker bij het verwijderen van paketten. Zoals ik zelf al hardhandig heb mogen ondervinden verwijderd hij dan bijvoorbeeld ook de dependencies van het paketje dat je probeert te verwijderen, en uiteraard ook alle paketten die daar ook afhankelijk van zijn. 

Het vierde deel van het commando is "install": dit is een actie binnenin het programma yum. Deze actie zorgt ervoor, zoals het woord al insinueert, dat er iets geinstalleerd moet worden. yum zorgt zelf voor de rest, zoals de keuze van welke repository gebruikt word, de opties bij het installeren, etc ..

Last but not least hebben we "puppet puppet-server": Dit zijn simpelweg de namen van de paketten die je wenst te installeren. Je kan er meerdere specifieren, zolang ze gescheiden zijn door een spatie. In het geval jouw pakketje een naam zou hebben met een spatie erin, dien je dus haakjes te gebruiken om de pakketnaam te "quoten" < ja inderdaad zoals dit.

In zijn geheel zorgt dit commando er dus voor dat de pakketten "puppet" en "puppet-server" geinstalleerd worden op jouw systeem zonder al te veel gemor over dependencies en dergelijke. Als het commando de command line terugkeert, zijn de pakketten geinstalleerd en kunnen we beginnen met de configuratie van de puppetmaster en daarna de puppet client.


configuratie
############

configuratie gebeurt aan de hand van manifests en modules. om even kort samen te vatten, modules zijn pakketjes modulaire manifests, die op een bepaalde manier in een map geplaatst worden, en daarna kunnen worden herbruikt door bijvoorbeeld andere mensen.
manifests zijn scriptjes waarin je declareert wat je wilt doen. Dit gaat van het beheren van bestanden, over mappen en links naar software pakketten en services.
Ook kan je in manifests en modules onderlinge relaties vastleggen, bijvoorbeeld tussen een configuratiebestand van een webserver en de service van de webserver.
Op deze manier kan de webserver automatisch herstart worden als dit bestand word aangepast, moest dit niet ingebouwd zijn.


file structure
##############

Zoals alle andere programma's heeft ook puppet enkele configuratie-bestanden nodig. Deze bestanden vinden we in de meeste linux-distributies terug in de map /etc/puppet/ . Hier worden niet enkel de configuraties van puppet zelf opgeslagen, maar ook de manifests die hij zal aanbieden aan clients. Per definitie zal puppet eerst zoeken naar een bestand genaamd site.pp . Dit bestand is het beginpunt van alle aangeboden manifests. vanuit dit bestand kan je ook andere bestanden aanhalen, zodat je een mooie, overzichtelijke mappenstructuur kan aanleggen waar je zelf nog aan uit kan.


puppet
######

Puppet is de naam van de standalone tool om puppetruns te maken. Dit wil zeggen dat deze applicatie geen verbinding maakt met een puppetmaster om zijn configuratie op te halen. Omdat het puppet programma geen verbinding maakt met een server om zijn configuratie op te halen, dien je wel als argument het pad naar een manifest mee te geven. Deze manifest heeft dezelfde opmaak als een gewone manifest, en word dan ook hetzelfde geÃ¯nterpreteerd.

puppetd
#######

Puppetd is de puppet daemon. daemon is de UNIX naam voor een service, en zoals verwacht is deze puppetd dan ook een service die op geregelde tijdstippen zijn configuratie binnenhaalt van een puppetmaster en uitvoert.

puppetmaster
############

puppetmaster is de naam van de puppet-server daemon. Dit wil zeggen dat we hier te maken hebben met een service die als server een dienst aanbied. In dit geval is die dienst het aanbieden van manifests aan clients, en hierbij gebruik te maken van een beveiligd kanaal.
Dit beveiligd kanaal word toegepast door een ssl-verbinding aan te leggen, meer info hierover later.

voorbeelden:
hier volgen een aantal voorbeelden van puppet manifests die ik heb geschreven, en die de mogelijkheid hebben om steeds een applicatie volledig te deployen.
Het gaat hier dan om iets uitgebreidere applicaties, die meestal veel configuratie en aanpassingen vereisen alsook veel moeite om ze op te zetten.


redmine:
Dit is een voorbeeld van een puppet manifest die als doel heeft de web-applicatie redmine op te zetten.
Redmine is een ruby on rails applicatie die vooral dient voor project management,
Hiermee kan je dus projecten aanmaken, opvolgen, taken toewijzen, bugs toewijzen, etc ..
De manifests werken zowel op RedHat gebaseerde systemen als op Debian gebaseerde systemen.

manifests/init.pp:

	node redmine {
		include apache_packages
		include apache_mod_passenger
		include mysql_packages
		include repos_centos
		include ruby
		include redmine_install
		include redmine_config
	}


modules/apache/manifests/init.pp:

	class apache_packages {
		package { apache:
			ensure => installed,
			name => $operatingsystem ? {
				archlinux => "apache",
				/Debian|Ubuntu/ => "apache2",
				/Centos|Fedora/ => "httpd",
			},
		}

		service { apache_daemon:
			ensure => running,
			enable => true,
			name => $operatingsystem ? {
				/Debian|Ubuntu/ => 'apache2',
				/Centos|Fedora/ => 'httpd',
			},
			require => Package['apache'],
		}

		package { 'apache-dev':
			ensure => installed,
			name => $operatingsystem ? {
				/Debian|Ubuntu/ => 'apache2-threaded-dev',
				/Centos|Fedora/ => 'httpd-devel',
			},
		}
	}

	class apache_config {
		file { 'apache.conf':
			ensure => present,
			owner => root,
			group => root,
			mode => 0644,
			name => $operatingsystem ? {
				/Debian|Ubuntu/ => '/etc/apache2/apache2.conf',
				/Centos|Fedora/ => '/etc/httpd/conf/httpd.conf',
			},
			source => 'puppet:///config/httpd',
			notify => Service['apache'],
		}
	}

	class apache_mod_passenger {
		package { passenger:
			ensure => installed,
			name => $operatingsystem ? {
				/Debian|Ubuntu/ => "libapache2-mod-passenger",
				/Centos|Fedora/ => "passenger",
			},
			provider => $operatingsystem ? {
				/Debian|Ubuntu/ => 'apt',
				/Centos|Fedora/ => 'gem',
			},
			require => Package['apache'],
		}
	}

	class apache_mod_php {
		package { "apache_mod_php":
			ensure => installed,
			name => $operatingsystem ? {
				/Debian|Ubuntu/ => "libapache2-mod-php",
			},
			require => Package["apache"],
			notify => Service["apache"],
		}
	}

	class apache_prefork {
		package { "apache2-prefork-dev":
			ensure => installed,
		}
	}

	class apache_mod_xsendfile {
		package { "mod-xsendfile":
			ensure => installed,
			name => $operatingsystem ? {
				/Debian|Ubuntu/ => "libapache2-mod-xsendfile",
				/Centos|Fedora/ => "mod_xsendfile",
			},
			require => Class["repos_centos"],
		}
	}


modules/mysql/init.pp:

	class mysql_packages {
		package { 'mysql-server':
			ensure => installed,
			name => $operatingsystem ? {
				Debian => 'mysql-server',
				Centos => 'mysql-server',
			},
		}

		service { 'mysqld':
			ensure => running,
			enable => true,
			name => $operatingsystem ? {
				Centos => 'mysqld',
				Debian => 'mysql',
			},
			require => Package['mysql-server'],
		}

		package { 'mysql-client':
			ensure => installed,
			name => $operatingsystem ? {
				Debian => 'mysql-client',
				Centos => 'mysql',
			},
			require => Package['mysql-server'],
		}

		package { 'mysql-dev':
			ensure => installed,
			name => $operatingsystem ? {
				Debian => 'libmysqlclient15-dev',
				Centos => 'mysql-devel',
			},
			require => Package['mysql-server'],
		}
	}

	class mysql_config {
		exec { 'setup_mysql_pass_root':
			command => '/usr/bin/mysqladmin -uroot -h localhost password "penguins"',
			unless => '/usr/bin/mysql -uroot -h localhost',
			require => Class['mysql_packages'],
		}
	}

modules/redmine/manifests/init.pp:

	class redmine_install {
		case $operatingsystem {
			Centos: { include redmine_install_centos }
			Debian: { include redmine_install_debian }
		}

		$redmine_id = $operatingsystem ? {
			/Debian|Ubuntu/ => 'www-data',
			/Centos|Fedora/ => 'apache',
		}

		group { redmine:
			ensure => present,
			name => $redmine_id,
		}	

		user { redmine:
			ensure => present,
			name => $redmine_id,
			gid => $redmine_id,
			require => Group["$redmine_id"],
		}

		package { redmine:
			ensure => installed,
			name => $operatingsystem ? {
				Centos => 'redmine_client',
				Debian => 'redmine',
			},
			provider => $operatingsystem ? {
				Centos => "gem",
				Debian => "apt",
			},
			before => Exec["config_redmine_mysql_bootstrap"],
			require => [ User['redmine'], Class['apache_packages', 'mysql_packages'] ],
		}
	}

	class redmine_install_debian {
		package { 'redmine-mysql':
			ensure => installed,
			require => Package['redmine'],
		}

		file { '/etc/apache2/sites-available/redmine':
			ensure => present,
			owner => root,
			group => root,
			mode => 0644,
			content => 'RailsBaseURI /redmine',
			require => Package['redmine'],
		}

		exec { 'config_redmine_link_apache':
			command => '/usr/sbin/a2ensite redmine',
			require => File['/etc/apache2/sites-available/redmine'],
			unless => '/usr/bin/test -f /etc/apache2/sites-enabled/redmine',
		}
	}

	class redmine_install_centos {
		file { '$HOME/.netrc':
			content => 'machine ftp.ruby-lang.org login anonymous password anonymous\nmacdef init\nprompt\ncd /pub/ruby\nget ruby-1.8.7-p334.tar.gz\nbye',
		}

	#	exec { 'ruby_centos':
	#		path => "/bin:/usr/bin",
	#		command => "cd ~/Downloads;ftp ftp.ruby-lang.org;cd /pub/ruby;get ruby-1.8.7-p334.tar.gz;tar xzvf ruby-1.8.7-p334.tar.gz ruby-1.8.7-p334;cd ruby-1.8.7-p334;./configure;make;make install;ruby -v;cd `dirname \`pwd\``",
	#		command => "/bin/sh -c 'cd ~/downloads;ftp ftp.ruby-lang.org;tar xzvf ruby-1.8.7-p334.tar.gz ruby-1.8.7-p334;cd ruby-1.8.7-p334;./configure;make;make install;ruby -v;cd `dirname 'which ruby'`'",
	#		require => File["$HOME/.netrc"],
	#	}

	#	exec { 'redmine_centos':
	#		path => '/bin:/usr/bin',
	#		command => '/bin/sh -c "cd /usr/share/;wget http://rubyforge.org/frs/download.php/74419/redmine-1.1.2.tar.gz;tar zxvf redmine-1.1.2.tar.gz;mv redmine-1.1.2 redmine;chmod -R a+rx /usr/share/redmine/public/;cd /usr/share/redmine;chmod -R 755 files log tmp"',
	#		unless => '/usr/bin/test -d /usr/share/redmine',
	#	}

		file { '/usr/share/redmine-1.1.3.tar.gz':
			ensure => present,
			source => 'puppet:///modules/redmine/redmine.tar.gz',
		}

		exec { 'extract_redmine':
			path => '/bin:/usr/bin',
			command => 'cd /usr/share && tar xzvf redmine-1.1.3.tar.gz redmine && touch /usr/share/redmine/redmine.puppet',
			require => File['/usr/share/redmine-1.1.3.tar.gz'],
			unless => '/usr/bin/test -f /usr/share/redmine/redmine.puppet',
		}

		file { '/etc/redmine':
			ensure => directory,
			owner => root,
			group => root,
			mode => 0755,
			before => File['/etc/redmine/default'],
		}

		file { '/etc/redmine/default':
			ensure => directory,
			owner => $redmine_id,
			group => $redmine_id,
			mode => 0755,
			before => Class['redmine_config'],
			require => Exec['redmine_centos'],
		}

		package { 'gem_i18n':
			ensure => '0.4.2',
			provider => gem,
			before => Package['gem_rails'],
		}

		package { 'gem_mysql':
			ensure => installed,
			name => mysql,
			provider => gem,
			require => Package['gem_i18n'],
		}

		package { 'gem_rack':
			ensure => '1.0.1',
			name => 'rack',
			provider => gem,
			before => Package['gem_rails'],
		}

		package { 'gem_hoe':
			ensure => installed,
			name => 'hoe',
			provider => gem,
			before => Package['gem_rails'],
		}

		package { 'gem_rails':
			ensure => installed,
			name => 'rails',
			provider => gem,
			before => Exec['config_redmine_mysql_bootstrap'],
		}

		package { 'curl-devel':
			ensure => installed,
		}

		exec { 'build_passenger_modules':
			path => '/bin:/usr/bin:/opt/ruby/bin',
			command => 'passenger-install-apache2-module -a',
			require => Package['$package_apache_mod_passenger'],
			unless => 'test -f /opt/ruby/lib/ruby/gems/1.8/gems/passenger-3.0.7/ext/apache2/mod_passenger.so',
		}

		exec { 'selinux_disable':
			path => '/bin:/usr/bin',
			command => 'system-config-securitylevel-tui -q --selinux="disabled"',
			unless => 'cat /etc/selinux/config|grep "SELINUX=disabled"',
			before => Service['apache'],
			notify => Service['apache'],
		}

		exec { 'session_store':
			path => '/bin:/usr/bin:/opt/ruby/bin',
			command => '/bin/sh -c "cd /usr/share/redmine/public && rake generate_session_store"',
			require => Package['gem_rails'],
		}

		file { '/etc/httpd/conf.d/redmine.conf':
			ensure => present,
			content => '<VirtualHost *:80>\n\tDocumentRoot /usr/share/redmine/public\n\tErrorLog logs/redmine_error_log\n</VirtualHost>',
			notify => Service['apache'],
		}

		exec { 'apache_modules':
			path => '/bin:/usr/bin',
			command => 'echo -e "LoadModule passenger_module /opt/ruby/lib/ruby/gems/1.8/gems/passenger-3.0.7/ext/apache2/mod_passenger.so\nPassengerRoot /opt/ruby/lib/ruby/gems/1.8/gems/passenger-3.0.7\nPassengerRuby /opt/ruby/bin/ruby" >> /etc/httpd/conf/httpd.conf',
			unless => 'cat /etc/httpd/conf/httpd.conf|grep "LoadModule passenger_module"',
			require => Class['apache_mod_passenger', 'rubygems'],
			notify => Service['apache'],
		}
	}

	class redmine_config {
		file { '/var/www/redmine':
			ensure => link,
			target => '/usr/share/redmine/public',
			owner => $redmine_id,
			group => $redmine_id,
			require => Package['redmine'],
		}

		exec { 'config_redmine_mysql_db':
			command =>  '/usr/bin/mysqladmin -uroot create redmine',
			unless => '/bin/echo "show databases"|mysql -uroot|grep redmine',
			require => Class['mysql_packages'],
		}

		exec { 'config_redmine_mysql_user':
			command =>  '/bin/echo "create user \'redmine\'@\'localhost\' identified by \'redmine\'"|mysql -uroot',
			unless => '/bin/echo "select user from mysql.user where user=\'redmine\'"|mysql -uroot|grep redmine',
			require => Exec['config_redmine_mysql_db'],
		}

		exec { 'config_redmine_mysql_permissions':
			command => '/bin/echo "grant all on redmine.* to \'redmine\'@\'localhost\'"|mysql -uroot',
			require =>  Exec["config_redmine_mysql_user"],
		}

		exec { 'config_redmine_mysql_bootstrap':
			environment => 'RAILS_ENV=production',
			path => '/usr:/usr/bin:/opt/ruby/bin',
			command => '/bin/sh -c "cd /usr/share/redmine && sudo /opt/ruby/bin/rake db:migrate"',
			require => Exec['config_redmine_mysql_permissions'],
		}

		exec { 'config_redmine_reload':
			command => $operatingsystem ? {
				Debian => '/etc/init.d/apache2 reload',
				Centos => '/etc/init.d/httpd reload',
			},
			require => Exec['config_redmine_mysql_bootstrap'],
			notify => Service['apache'],
		}
	}
